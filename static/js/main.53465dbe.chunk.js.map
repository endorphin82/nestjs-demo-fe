{"version":3,"sources":["config/env/development.ts","config/env/production.ts","config/env sync /^/.//.*$","serviceWorker.ts","redux/actions/user.ts","redux/actions/auth.ts","redux/actions/newpass.ts","redux/actions/forgot.ts","redux/sagas/api/index.ts","redux/reducers/user.ts","redux/reducers/auth.ts","redux/reducers/newpass.ts","redux/reducers/index.ts","config/index.ts","redux/constants/auth.ts","redux/sagas/api/auth.ts","redux/sagas/auth.ts","redux/sagas/index.ts","redux/store/index.ts","components/common/fallback.tsx","pages/home/index.tsx","components/auth/login/loginForm.tsx","containers/auth/login/index.tsx","pages/auth/login.tsx","components/auth/signup/signUpForm.tsx","containers/auth/signup/index.tsx","pages/auth/signup.tsx","pages/auth/signUpSuccess.tsx","components/auth/newpass/newpassForm.tsx","containers/auth/newpass/index.tsx","pages/auth/newpass.tsx","components/auth/preforgot/preforgotForm.tsx","containers/auth/preforgot/index.tsx","pages/auth/preforgot.tsx","pages/auth/afterforgot.tsx","router/index.tsx","index.tsx"],"names":["BASE_URL","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Type","UserActions","setUser","createAction","SET_USER","AuthActions","setAuthInfo","SET_AUTH","signIn","SIGN_IN","signUp","SIGN_UP","NewPassActions","newpass","NEW_PASS","ContentTypes","ForgotActions","forgot","FORGOT","UserReducer","handleActions","state","action","payload","AuthReducer","NewPassReducer","rootReducer","combineReducers","router","routerReducer","user","auth","_","environment","process","require","default","signInURL","config","signUpURL","newpassURL","forgotURL","data","axios","url","method","headers","APPLICATION_JSON","console","log","SignInWorker","SignUpWorker","NewPassWorker","ForgotWorker","watchAuth","call","put","message","error","push","takeLatest","rootSaga","all","authSaga","history","createBrowserHistory","sagaMiddleware","createSagaMiddleware","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","routerMiddleware","store","createStore","run","Fallback","className","tip","Home","LoginForm","props","Form","useForm","form","onFinish","valuefromformlist","validateFields","then","handleSubmit","resetFields","catch","handleError","Item","name","rules","required","type","prefix","MailOutlined","style","color","placeholder","Password","LockOutlined","initialValue","valuePropName","to","htmlType","connect","dispatch","LoginPage","Option","Select","SignUpForm","layout","UserOutlined","theme","IdcardOutlined","value","key","ManOutlined","WomanOutlined","hasFeedback","dependencies","getFieldValue","validator","rule","Promise","reject","SignupPage","forwardTo","status","title","subTitle","extra","onClick","NewpassForm","useHistory","token","URLSearchParams","useLocation","search","get","password","confirmPassword","NewPassPage","PreforgotForm","PreForgotPage","fallback","exact","path","component","HomePage","SignUpPage","SignUpSuccessPage","ForgotSuccessPage","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53465dbe.chunk.js","sourcesContent":["export default {\n  BASE_URL: 'https://endorphin.fun',\n};\n","export default {\n  BASE_URL: 'https://endorphin.fun',\n};\n","var map = {\n\t\"./development\": 128,\n\t\"./development.ts\": 128,\n\t\"./production\": 129,\n\t\"./production.ts\": 129\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 192;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport { createAction } from 'redux-actions';\nimport { IUser } from '../../types';\n\nenum Type {\n    SET_USER = 'SET_USER'\n}\n\nconst setUser = createAction<IUser>(Type.SET_USER);\n\nexport const UserActions = {\n    Type,\n\n    setUser,\n}\n\nexport type UserActions = Omit<typeof UserActions, 'Type'>;","import { createAction } from 'redux-actions';\nimport { IAuth, ILogin, ISignUp } from '../../types/auth';\n\nenum Type {\n    SIGN_IN = 'SIGN_IN',\n    SET_AUTH = 'SET_AUTH',\n    SIGN_UP = 'SIGN_UP',\n}\n\nconst setAuthInfo = createAction<IAuth>(Type.SET_AUTH);\nconst signIn = createAction<ILogin>(Type.SIGN_IN);\nconst signUp = createAction<ISignUp>(Type.SIGN_UP);\n\n\n\nexport const AuthActions = {\n    Type,\n\n    setAuthInfo,\n    signIn,\n    signUp,\n}\n\nexport type AuthActions = Omit<typeof AuthActions, 'Type'>;\n","import {createAction} from 'redux-actions';\nimport {INewpass} from '../../types/auth';\n\nenum Type {\n  NEW_PASS = 'NEW_PASS',\n}\n\nconst newpass = createAction<INewpass>(Type.NEW_PASS);\n\n\nexport const NewPassActions = {\n  Type,\n\n  newpass\n}\n\nexport type NewPassActions = Omit<typeof NewPassActions, 'Type'>;\n","import {createAction} from 'redux-actions';\nimport {IForgot} from '../../types/auth';\n\nenum Type {\n  FORGOT = 'FORGOT',\n}\n\nconst forgot = createAction<IForgot>(Type.FORGOT);\n\n\nexport const ForgotActions = {\n  Type,\n\n  forgot\n}\n\nexport type ForgotActions = Omit<typeof ForgotActions, 'Type'>;\n","export enum ContentTypes {\n    APPLICATION_JSON = 'application/json',\n    MULTIPART_FORM_DATA = 'multipart/form-data',\n}\n\nexport * from './auth';","import { handleActions } from 'redux-actions';\nimport { IUser } from '../../types';\nimport { UserActions } from '../actions';\n\nconst initialState = null;\n\nexport const UserReducer = handleActions<IUser | null, IUser>({\n    [UserActions.Type.SET_USER]: (state, action) => action.payload,\n}, initialState);","import { handleActions } from \"redux-actions\";\nimport { IAuth } from \"../../types/auth\";\nimport { AuthActions } from \"../actions\";\n\nconst initialState = null;\n\nexport const AuthReducer = handleActions<IAuth | null, IAuth>({\n    [AuthActions.Type.SET_AUTH]: (state, action) => action.payload,\n}, initialState)","import { handleActions } from \"redux-actions\";\nimport { INewpass} from \"../../types/auth\";\nimport { NewPassActions } from \"../actions\";\n\nconst initialState = null;\n\nexport const NewPassReducer = handleActions<INewpass | null, INewpass>({\n  [NewPassActions.Type.NEW_PASS]: (state, action) => action.payload,\n}, initialState)\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport {combineReducers} from 'redux';\nimport {routerReducer} from 'react-router-redux';\nimport {UserReducer} from './user';\nimport {IRootState} from './state';\nimport {AuthReducer} from './auth';\nimport {NewPassReducer} from './newpass';\n\n// NOTE: current type definition of Reducer in 'redux-actions' module\n// doesn't go well with redux@4\nconst rootReducer = combineReducers<IRootState>({\n  router: routerReducer,\n  user: UserReducer as any,\n  auth: AuthReducer as any,\n  newpass: NewPassReducer as any,\n});\n\nexport default rootReducer;\n","import *  as _ from 'lodash';\n\nconst environment = process.env.NODE_ENV || 'development';\n\ninterface IConfig {\n  environment: string;\n  BASE_URL: string;\n}\n\nexport default _.extend<IConfig>({\n  environment,\n},\nrequire(`${__dirname}/env/${environment}`).default, /* eslint \"import/no-dynamic-require\": 0 */\n);\n","import config from '../../config';\n\nexport const signInURL = `${config.BASE_URL}/auth/signIn`;\nexport const signUpURL = `${config.BASE_URL}/auth/signUp`;\nexport const newpassURL = `${config.BASE_URL}/auth/changemypass`;\nexport const forgotURL = `${config.BASE_URL}/auth/forgotPassword`;\n\nexport const signUpSuccessRoute = '/signup/success';\nexport const newpassSuccessRoute = '/newpass/sucess';\nexport const preforgotSuccessRoute = '/forgot/success';\n\nexport const rootRoute = '/';\n","import axios from 'axios';\nimport {ILogin, ISignUp, INewpass, IForgot} from '../../../types';\nimport {ContentTypes} from '.';\nimport {forgotURL, newpassURL, signInURL, signUpURL} from '../../constants/auth';\n\nexport function signIn(data: ILogin) {\n  return axios({\n    url: signInURL,\n    method: 'POST',\n    headers: {\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n\nexport function signUp(data: ISignUp) {\n  return axios({\n    url: signUpURL,\n    method: 'POST',\n    headers: {\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n\nexport function newpass(data: INewpass) {\n  return axios({\n    url: newpassURL,\n    method: 'POST',\n    headers: {\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n\nexport function forgot(data: IForgot) {\n  console.log('forgot');\n  return axios({\n    url: forgotURL,\n    method: 'POST',\n    headers: {\n      'accept': '*/*',\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n","import {put, call, select, takeLatest,} from 'redux-saga/effects';\nimport {push} from 'react-router-redux';\nimport {message} from 'antd';\nimport {AuthActions, UserActions, NewPassActions} from '../actions';\nimport {Action} from 'redux-actions';\nimport {ILogin, IAuth, IUser, ISignUp, INewpass, IForgot} from '../../types';\nimport {signIn, signUp, newpass, forgot} from './api';\nimport * as _ from 'lodash';\nimport {newpassSuccessRoute, signUpSuccessRoute} from \"../constants/auth\";\nimport {ForgotActions} from \"../actions/forgot\";\n\n\nfunction* SignInWorker(action: Action<ILogin>) {\n  try {\n    const {data} = yield call(signIn, action.payload);\n\n    yield put(AuthActions.setAuthInfo(_.pick(data, ['accessToken']) as IAuth));\n    yield put(UserActions.setUser(_.omit(data, 'accessToken') as IUser));\n  } catch (error) {\n    message.error('Failed to login!');\n    console.error(error);\n  }\n}\n\nfunction* SignUpWorker(action: Action<ISignUp>) {\n  try {\n    const {data} = yield call(signUp, action.payload);\n\n    yield put(push(signUpSuccessRoute));\n  } catch (error) {\n    message.error('Failed to sign up!');\n    console.error(error);\n  }\n}\n\nfunction* NewPassWorker(action: Action<INewpass>) {\n  try {\n    yield call(newpass, action.payload);\n  } catch (error) {\n    message.error('Failed to NewPassWorker!');\n    console.error(error);\n  }\n}\n\nfunction* ForgotWorker(action: Action<IForgot>) {\n  try {\n    yield call(forgot, action.payload);\n  } catch (error) {\n    message.error('Failed to ForgotWorker!');\n    console.error(error);\n  }\n}\n\n\nexport default function* watchAuth() {\n  yield takeLatest(AuthActions.Type.SIGN_IN, SignInWorker);\n  yield takeLatest(AuthActions.Type.SIGN_UP, SignUpWorker);\n  yield takeLatest(NewPassActions.Type.NEW_PASS, NewPassWorker);\n  yield takeLatest(ForgotActions.Type.FORGOT, ForgotWorker);\n}\n","import { all } from 'redux-saga/effects';\nimport authSaga from './auth';\n\nexport default function* rootSaga() {\n    yield all([\n        authSaga(),\n    ]);\n}","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from 'react-router-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\n\nimport rootReducer from \"../reducers\";\nimport rootSaga from '../sagas';\n\nexport const history = createBrowserHistory();\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers =\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\nconst enhancer = composeEnhancers(\n    applyMiddleware(sagaMiddleware, routerMiddleware(history))\n);\nconst store = createStore(rootReducer, enhancer);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport { Spin } from 'antd';\n\nimport './styles.scss';\n\nexport default function Fallback() {\n    return (\n        <div className=\"router-lazy-spin\">\n            <Spin tip=\"Loading...\" />\n        </div>\n    )\n}\n","import React from 'react';\nimport './style.scss';\nconsole.log(\"Home\")\n\nexport default function Home() {\n    return (\n        <div className=\"some-class\">\n            Hello React!\n        </div>\n    )\n}\n","import React from 'react';\nimport {Form, Input, Button, Checkbox} from 'antd';\nimport {LockOutlined, MailOutlined} from '@ant-design/icons';\n\nimport Icon from '@ant-design/icons'\nimport './styles.scss';\nimport {Link} from 'react-router-dom';\nimport {ILogin} from '../../../types';\nimport {GoogleLogin} from \"react-google-login\";\n\ninterface ILoginFormProps {\n    handleSubmit(values: ILogin): void,\n\n    handleError(error: any): void,\n}\n\nexport default function LoginForm(props: ILoginFormProps) {\n    // @ts-ignore\n    const [form] = Form.useForm()\n\n    function onFinish(valuefromformlist: any): void {\n        form\n            .validateFields()\n            .then(() => {\n                props.handleSubmit(valuefromformlist);\n                form.resetFields();\n            })\n            .catch((error: any) => {\n                console.log('Validate Failed:', error);\n                return props.handleError(error);\n            });\n    }\n\n    return (\n        // @ts-ignore\n        <Form onFinish={onFinish} className=\"login-form\">\n            <h3 className=\"main-label\">LOG IN</h3>\n            <Form.Item\n                // @ts-ignore\n                name=\"email\"\n                rules={[{required: true, message: 'Please add your email!'}]}\n            >\n                <Input\n                    type=\"email\"\n                    name=\"email\"\n                    // @ts-ignore\n                    prefix={<MailOutlined style={{color: 'rgba(0,0,0,.25)'}}/>}\n                    placeholder=\"Email\"\n                />\n            </Form.Item>\n            <Form.Item\n                // @ts-ignore\n                name=\"password\"\n                rules={[{required: true, message: 'Please add your Password!'}]}\n            >\n                <Input.Password\n                    // @ts-ignore\n                    prefix={<LockOutlined style={{color: 'rgba(0,0,0,.25)'}}/>}\n                    name=\"password\"\n                    placeholder=\"Password\"\n                />\n            </Form.Item>\n            <Form.Item\n                // @ts-ignore\n                name=\"remember\"\n                initialValue={true}\n                valuePropName='checked'\n            >\n                <Checkbox name=\"remember\"\n                    // onChange={handleChange}\n                >Remember me</Checkbox>\n            </Form.Item>\n            <Form.Item>\n                <Link to=\"/forgot\" className=\"login-form-forgot\">\n                    Forgot password\n                </Link>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                    Log in\n                </Button>\n                Or <Link to=\"/signup\">register now!</Link>\n                Or <div>\n                {/*<GoogleLogin*/}\n                {/*    clientId=\"319511837370-6h11919mja93u8rijnlbu3h5j8kt9k5l.apps.googleusercontent.com\"*/}\n                {/*    buttonText=\"Login\"*/}\n                {/*    isSignedIn={true}*/}\n                {/*/>*/}\n            </div>\n\n            </Form.Item>\n        </Form>\n    )\n}\n\n","import React from 'react';\nimport { connect, MapDispatchToProps } from 'react-redux';\nimport LoginForm from '../../../components/auth/login/loginForm';\n\nimport './styles.scss';\nimport { IRootState } from '../../../redux/reducers/state';\nimport { Dispatch } from 'redux';\nimport { ILogin } from '../../../types';\nimport { AuthActions } from '../../../redux/actions';\n\ntype ILoginContainerProps = ReturnType<typeof mapDispatchToProps>;\n\nfunction LoginContainer(props: ILoginContainerProps) {\n    return (\n        <div className=\"login-form-container\">\n            <LoginForm handleSubmit={props.signIn} handleError={console.error} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    signIn: (payload: ILogin) => dispatch(AuthActions.signIn(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n","import React from 'react'\nimport LoginContainer from '../../containers/auth/login'\n\nexport default function LoginPage() {\n    return (\n        <LoginContainer />\n    )\n}\n","import React from 'react';\nimport {Form, Input, Button, Select} from 'antd';\nimport {LockOutlined, MailOutlined, UserOutlined, IdcardOutlined, ManOutlined, WomanOutlined} from '@ant-design/icons';\nimport './styles.scss';\nimport {Link} from 'react-router-dom';\nimport {ISignUp} from \"../../../types\";\n\nconst {Option} = Select;\n\ninterface ISignUpFormProps {\n  handleSubmit(values: ISignUp): void;\n\n  handleError(error: any): void;\n}\n\nexport default function SignUpForm(props: ISignUpFormProps) {\n  // @ts-ignore\n  const [form] = Form.useForm()\n\n  function onFinish(valuefromformlist: any): void {\n    form\n      .validateFields()\n      .then(() => {\n        console.log(\"finish values\", valuefromformlist);\n        props.handleSubmit(valuefromformlist);\n        form.resetFields();\n      })\n      .catch((error: any) => {\n        console.log('Validate Failed:', error);\n        return props.handleError(error);\n      });\n  }\n\n  function compareToFirstPassword(rule: any, value: string, callback: Function) {\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n\n  return (\n    // @ts-ignore\n    <Form onFinish={onFinish} className=\"signup-form\" layout=\"horizontal\">\n      <h3 className=\"main-label\">SIGN UP</h3>\n      <Form.Item\n        // @ts-ignore\n        name=\"firstName\"\n        rules={[{required: true, message: 'Please add your First Name!'}]}\n      >\n        <Input\n          type=\"text\"\n          name=\"firstName\"\n          // @ts-ignore\n          prefix={<UserOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"First Name\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"lastName\"\n        rules={[{required: true, message: 'Please add your Last Name!'}]}\n      >\n        <Input\n          type=\"text\"\n          name=\"lastName\"\n          // @ts-ignore\n          prefix={<IdcardOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Last Name\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"gender\"\n        rules={[{required: true, message: 'Please select your gender!'}]}\n      >\n\n        <Select\n          placeholder=\"Select gender\">\n          <Option value=\"male\"          // @ts-ignore\n                  key=\"gender\" name=\"gender\"><ManOutlined style={{color: 'rgba(0,0,0,.25)'}}/> Male</Option>\n          <Option value=\"female\"        // @ts-ignore\n                  name=\"gender\"><WomanOutlined style={{color: 'rgba(0,0,0,.25)'}}/> Female</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"email\"\n        rules={[{required: true, message: 'Please add your email!'}]}\n      >\n\n        <Input\n          type=\"email\"\n          name=\"email\"\n          // @ts-ignore\n          prefix={<MailOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Email\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"password\"\n        hasFeedback\n        rules={[{required: true, message: 'Please add your Password!'}]}\n      >\n        <Input.Password\n          name=\"password\"\n          // @ts-ignore\n          prefix={<LockOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          // type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"confirmPassword\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          // @ts-ignore\n          ({getFieldValue}) => ({\n            // @ts-ignore\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password\n          name=\"confirmPassword\"\n          // @ts-ignore\n          prefix={<LockOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Confirm Password\"\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"signup-form-button\">\n          Sign Up\n        </Button>\n        Or <Link to=\"/\">Log In</Link>\n      </Form.Item>\n    </Form>\n  )\n}\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport './styles.scss';\nimport SignUpForm from '../../../components/auth/signup/signUpForm';\nimport {ISignUp} from \"../../../types\";\nimport {AuthActions} from \"../../../redux/actions\";\n\ntype ISignUpContainerProps = ReturnType<typeof mapDispatchToProps>;\nconsole.log(\"SignUpContainer in\");\n\nfunction SignupContainer(props: ISignUpContainerProps) {\n    return (\n        <div className=\"signup-form-container\">\n            <SignUpForm handleSubmit={props.signUp} handleError={console.error} />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    signUp: (payload: ISignUp) => dispatch(AuthActions.signUp(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(SignupContainer);\n","import React from 'react';\nimport SignUpContainer from '../../containers/auth/signup';\n\nconsole.log(\"SignUpContainer\");\nexport default function SignupPage() {\n    return (\n       <SignUpContainer />\n    )\n}\n","import React, { Dispatch } from 'react';\nimport { Result, Button } from 'antd';\nimport { push } from 'react-router-redux'\nimport { connect } from \"react-redux\";\n\nfunction SignUpSuccess(props: ReturnType<typeof mapDispatchToProps>) {\n    return <Result\n                status=\"success\"\n                title=\"Successfully signed up!\"\n                subTitle=\"Congratulations! You've just created new account!\"\n                extra={[\n                    <Button\n                        type=\"primary\"\n                        key=\"console\"\n                        onClick={props.forwardTo}>\n                        Go to SignIn\n                    </Button>\n                ]}\n    />;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    forwardTo: () => dispatch(push('/'))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUpSuccess);","import React from 'react';\nimport {Form, Input, Button} from 'antd';\nimport {LockOutlined} from '@ant-design/icons';\n\nimport './styles.scss';\nimport {Link, useHistory, useLocation} from 'react-router-dom';\nimport {INewpass} from '../../../types';\nimport {rootRoute} from \"../../../redux/constants/auth\";\n\ninterface IForgotFormProps {\n  handleSubmit(values: INewpass): void,\n\n  handleError(error: any): void,\n}\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nexport default function NewpassForm(props: IForgotFormProps) {\n  // @ts-ignore\n  const [form] = Form.useForm()\n  let history = useHistory();\n  const query = useQuery();\n  const token = query.get(\"token\")\n\n  function onFinish(valuefromformlist: any): void {\n    console.log(valuefromformlist);\n    const data = {\n      token: token,\n      password: valuefromformlist.confirmPassword\n    } as INewpass\n    form\n      .validateFields()\n      .then(() => {\n        props.handleSubmit(data);\n        console.log(data);\n        form.resetFields();\n        history.push(rootRoute)\n      })\n      .catch((error: any) => {\n        console.log('Validate Failed:', error);\n        return props.handleError(error);\n      });\n  }\n\n  return (\n    // @ts-ignore\n    <Form onFinish={onFinish} className=\"login-form\">\n      <h3 className=\"main-label\">CHANGE PASSWORD</h3>\n      <Form.Item\n        // @ts-ignore\n        name=\"password\"\n        hasFeedback\n        rules={[{required: true, message: 'Please add your Password!'}]}\n      >\n        <Input.Password\n          name=\"password\"\n          // @ts-ignore\n          prefix={<LockOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          // type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"confirmPassword\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          // @ts-ignore\n          ({getFieldValue}) => ({\n            // @ts-ignore\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password\n          name=\"confirmPassword\"\n          // @ts-ignore\n          prefix={<LockOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Confirm Password\"\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n          Change Password\n        </Button>\n        Or <Link to=\"/signup\">register now!</Link>\n      </Form.Item>\n    </Form>\n  )\n}\n\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport './styles.scss';\nimport {IRootState} from '../../../redux/reducers/state';\nimport {Dispatch} from 'redux';\nimport {INewpass} from '../../../types';\nimport {NewPassActions} from '../../../redux/actions';\nimport NewpassForm from '../../../components/auth/newpass/newpassForm';\n\ntype INewPassContainerProps = ReturnType<typeof mapDispatchToProps>;\n\nfunction NewPassContainer(props: INewPassContainerProps) {\n  return (\n    <div className=\"login-form-container\">\n      <NewpassForm handleSubmit={props.newpass} handleError={console.error}/>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: IRootState) => ({});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  newpass: (payload: INewpass) => dispatch(NewPassActions.newpass(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassContainer);\n","import React from 'react'\nimport NewPassContainer from \"../../containers/auth/newpass\";\n\n\nexport default function NewPassPage() {\n  return (\n    <NewPassContainer />\n  )\n}\n","import React from 'react';\nimport {Form, Input, Button, Checkbox} from 'antd';\nimport {MailOutlined} from '@ant-design/icons';\n\nimport './styles.scss';\nimport {Link, useHistory} from 'react-router-dom';\nimport {IForgot} from '../../../types';\nimport {preforgotSuccessRoute} from \"../../../redux/constants/auth\";\n\ninterface IPreForgotFormProps {\n  handleSubmit(values: IForgot): void,\n\n  handleError(error: any): void,\n}\n\nexport default function PreforgotForm(props: IPreForgotFormProps) {\n  // @ts-ignore\n  const [form] = Form.useForm()\n  let history = useHistory();\n\n  function onFinish(valuefromformlist: any): void {\n    form\n      .validateFields()\n      .then(() => {\n        props.handleSubmit(valuefromformlist);\n        form.resetFields();\n        history.push(preforgotSuccessRoute)\n      })\n      .catch((error: any) => {\n        console.log('Validate Failed:', error);\n        return props.handleError(error);\n      });\n  }\n\n  return (\n    // @ts-ignore\n    <Form onFinish={onFinish} className=\"login-form\">\n      <h3 className=\"main-label\">ENTER EMAIL</h3>\n      <Form.Item\n        // @ts-ignore\n        name=\"email\"\n        rules={[{required: true, message: 'Please add your email!'}]}\n      >\n        <Input\n          type=\"email\"\n          name=\"email\"\n          // @ts-ignore\n          prefix={<MailOutlined style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Email\"\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n          Send link for reset password\n        </Button>\n        Or <Link to=\"/signup\">register now!</Link>\n      </Form.Item>\n    </Form>\n  )\n}\n\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport './styles.scss';\nimport {IRootState} from '../../../redux/reducers/state';\nimport {Dispatch} from 'redux';\nimport {IForgot} from '../../../types';\nimport PreforgotForm from \"../../../components/auth/preforgot/preforgotForm\";\nimport {ForgotActions} from \"../../../redux/actions/forgot\";\n\ntype IPreForgotContainerProps = ReturnType<typeof mapDispatchToProps>;\n\nfunction PreForgotContainer(props: IPreForgotContainerProps) {\n  return (\n    <div className=\"login-form-container\">\n      <PreforgotForm handleSubmit={props.forgot} handleError={console.error}/>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: IRootState) => ({});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  forgot: (payload: IForgot) => dispatch(ForgotActions.forgot(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PreForgotContainer);\n","import React from 'react'\nimport PreForgotContainer from \"../../containers/auth/preforgot\";\n\n\nexport default function PreForgotPage() {\n  return (\n    <PreForgotContainer />\n  )\n}\n","import React, { Dispatch } from 'react';\nimport { Result, Button } from 'antd';\nimport { push } from 'react-router-redux'\nimport { connect } from \"react-redux\";\n\nfunction AfterForgotPage(props: ReturnType<typeof mapDispatchToProps>) {\n  return <Result\n    status=\"success\"\n    title=\"link for reset password send in email!\"\n    subTitle=\"Check email for reset password\"\n    extra={[\n      <Button\n        type=\"primary\"\n        key=\"console\"\n        onClick={props.forwardTo}>\n        Go to SignIn\n      </Button>\n    ]}\n  />;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  forwardTo: () => dispatch(push('/'))\n});\n\nexport default connect(null, mapDispatchToProps)(AfterForgotPage);\n","import React, {Suspense, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport {Router, Route, Switch, RouteProps} from 'react-router-dom';\nimport {history} from '../redux/store';\nimport Fallback from '../components/common/fallback';\nimport {IRootState} from '../redux/reducers/state';\nimport {IAuth} from '../types/auth';\nimport 'antd/dist/antd.css';\n//\n// const HomePage = React.lazy(() => import('../pages/home'));\n// const LoginPage = React.lazy(() => import('../pages/auth/login'));\n// const SignUpPage = React.lazy(() => import('../pages/auth/signup'));\n// const SignUpSuccessPage = React.lazy(() => import('../pages/auth/signUpSuccess'));\n// const NewPassPage = React.lazy(() => import('../pages/auth/newpass'));\n// const PreForgotPage = React.lazy(() => import('../pages/auth/preforgot'));\n// const ForgotSuccessPage = React.lazy(() => import('../pages/auth/afterforgot'));\n\nimport HomePage from '../pages/home'\nimport LoginPage from '../pages/auth/login'\nimport SignUpPage from '../pages/auth/signup'\nimport SignUpSuccessPage from '../pages/auth/signUpSuccess'\nimport NewPassPage from '../pages/auth/newpass'\nimport PreForgotPage from '../pages/auth/preforgot'\nimport ForgotSuccessPage from '../pages/auth/afterforgot'\n\ninterface IMainRouterProps extends RouteProps {\n    auth: IAuth,\n}\n\nconsole.log(\"MainRouter\")\n\nfunction MainRouter(props: IMainRouterProps) {\n    return (\n        <Router history={history}>\n            <Suspense fallback={<Fallback/>}>\n                <Switch>\n                    {props.auth\n                        ? (\n                            <Route exact path=\"/\" component={HomePage}/>\n                        )\n                        : (\n                            <>\n                                <Route exact path=\"/\" component={LoginPage}/>\n                                <Route exact path=\"/signup\" component={SignUpPage}/>\n                                <Route exact path=\"/signup/success\" component={SignUpSuccessPage}/>\n                                <Route exact path=\"/forgot/success\" component={ForgotSuccessPage}/>\n                                <Route exact path=\"/auth/forgotPassword\" component={NewPassPage}/>\n                                <Route exact path=\"/forgot\" component={PreForgotPage}/>\n                            </>\n                        )\n                    }\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nconst mapStateToProps = (state: IRootState): IMainRouterProps => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(MainRouter);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport MainRouter from './router';\n\nimport './index.scss';\nconsole.log(\"index\")\nconst app = (\n    <Provider store={store}>\n        <MainRouter />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}