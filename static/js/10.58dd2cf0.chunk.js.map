{"version":3,"sources":["components/auth/signup/signUpForm.tsx","containers/auth/signup/index.tsx","pages/auth/signup.tsx"],"names":["Option","Select","SignUpForm","props","Form","useForm","form","onFinish","valuefromformlist","validateFields","then","console","log","handleSubmit","resetFields","catch","error","handleError","className","layout","Item","name","rules","required","message","type","prefix","UserOutlined","theme","style","color","placeholder","IdcardOutlined","value","key","ManOutlined","WomanOutlined","MailOutlined","hasFeedback","Password","LockOutlined","dependencies","getFieldValue","validator","rule","Promise","reject","resolve","htmlType","to","connect","dispatch","signUp","payload","AuthActions","SignupPage"],"mappings":"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","file":"static/js/10.58dd2cf0.chunk.js","sourcesContent":["import React from 'react';\nimport {Form, Input, Button, Select} from 'antd';\nimport {LockOutlined, MailOutlined, UserOutlined, IdcardOutlined, ManOutlined, WomanOutlined} from '@ant-design/icons';\nimport './styles.scss';\nimport {Link} from 'react-router-dom';\nimport {ISignUp} from \"../../../types\";\n\nconst {Option} = Select;\n\ninterface ISignUpFormProps {\n  handleSubmit(values: ISignUp): void;\n\n  handleError(error: any): void;\n}\n\nexport default function SignUpForm(props: ISignUpFormProps) {\n  // @ts-ignore\n  const [form] = Form.useForm()\n\n  function onFinish(valuefromformlist: any): void {\n    form\n      .validateFields()\n      .then(() => {\n        console.log(\"finish values\", valuefromformlist);\n        props.handleSubmit(valuefromformlist);\n        form.resetFields();\n      })\n      .catch((error: any) => {\n        console.log('Validate Failed:', error);\n        return props.handleError(error);\n      });\n  }\n\n  function compareToFirstPassword(rule: any, value: string, callback: Function) {\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n\n  return (\n    // @ts-ignore\n    <Form onFinish={onFinish} className=\"signup-form\" layout=\"horizontal\">\n      <h3 className=\"main-label\">SIGN UP</h3>\n      <Form.Item\n        // @ts-ignore\n        name=\"firstName\"\n        rules={[{required: true, message: 'Please add your First Name!'}]}\n      >\n        <Input\n          type=\"text\"\n          name=\"firstName\"\n          // @ts-ignore\n          prefix={<UserOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"First Name\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"lastName\"\n        rules={[{required: true, message: 'Please add your Last Name!'}]}\n      >\n        <Input\n          type=\"text\"\n          name=\"lastName\"\n          // @ts-ignore\n          prefix={<IdcardOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Last Name\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"gender\"\n        rules={[{required: true, message: 'Please select your gender!'}]}\n      >\n\n        <Select\n          placeholder=\"Select gender\">\n          <Option value=\"male\"          // @ts-ignore\n                  key=\"gender\" name=\"gender\"><ManOutlined style={{color: 'rgba(0,0,0,.25)'}}/> Male</Option>\n          <Option value=\"female\"        // @ts-ignore\n                  name=\"gender\"><WomanOutlined style={{color: 'rgba(0,0,0,.25)'}}/> Female</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"email\"\n        rules={[{required: true, message: 'Please add your email!'}]}\n      >\n\n        <Input\n          type=\"email\"\n          name=\"email\"\n          // @ts-ignore\n          prefix={<MailOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Email\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"password\"\n        hasFeedback\n        rules={[{required: true, message: 'Please add your Password!'}]}\n      >\n        <Input.Password\n          name=\"password\"\n          // @ts-ignore\n          prefix={<LockOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          // type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n      <Form.Item\n        // @ts-ignore\n        name=\"confirmPassword\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          // @ts-ignore\n          ({getFieldValue}) => ({\n            // @ts-ignore\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password\n          name=\"confirmPassword\"\n          // @ts-ignore\n          prefix={<LockOutlined theme=\"filled\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n          placeholder=\"Confirm Password\"\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"signup-form-button\">\n          Sign Up\n        </Button>\n        Or <Link to=\"/\">Log In</Link>\n      </Form.Item>\n    </Form>\n  )\n}\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport './styles.scss';\nimport SignUpForm from '../../../components/auth/signup/signUpForm';\nimport {ISignUp} from \"../../../types\";\nimport {AuthActions} from \"../../../redux/actions\";\n\ntype ISignUpContainerProps = ReturnType<typeof mapDispatchToProps>;\n\nfunction SignupContainer(props: ISignUpContainerProps) {\n    return (\n        <div className=\"signup-form-container\">\n            <SignUpForm handleSubmit={props.signUp} handleError={console.error} />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    signUp: (payload: ISignUp) => dispatch(AuthActions.signUp(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(SignupContainer);\n","import React from 'react';\nimport SignUpContainer from '../../containers/auth/signup';\n\nexport default function SignupPage() {\n    return (\n       <SignUpContainer />\n    )\n}\n"],"sourceRoot":""}