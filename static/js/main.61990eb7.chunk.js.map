{"version":3,"sources":["redux/actions/user.ts","redux/actions/auth.ts","redux/actions/newpass.ts","config/env sync /^/.//.*$","serviceWorker.ts","redux/sagas/api/index.ts","redux/reducers/user.ts","redux/reducers/auth.ts","redux/reducers/newpass.ts","redux/reducers/index.ts","redux/sagas/api/auth.ts","redux/sagas/auth.ts","redux/sagas/index.ts","redux/store/index.ts","components/common/fallback.tsx","router/index.tsx","index.tsx","config/index.ts","redux/constants/auth.ts","redux/actions/forgot.ts","config/env/development.ts","config/env/production.ts"],"names":["Type","UserActions","setUser","createAction","SET_USER","AuthActions","setAuthInfo","SET_AUTH","signIn","SIGN_IN","signUp","SIGN_UP","NewPassActions","newpass","NEW_PASS","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","ContentTypes","UserReducer","handleActions","state","action","payload","AuthReducer","NewPassReducer","rootReducer","combineReducers","router","routerReducer","user","auth","data","axios","url","signInURL","method","headers","APPLICATION_JSON","signUpURL","newpassURL","forgot","console","log","forgotURL","SignInWorker","SignUpWorker","NewPassWorker","ForgotWorker","watchAuth","call","put","_","message","error","push","signUpSuccessRoute","takeLatest","ForgotActions","FORGOT","rootSaga","all","authSaga","history","createBrowserHistory","sagaMiddleware","createSagaMiddleware","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","routerMiddleware","store","createStore","run","Fallback","className","tip","HomePage","React","lazy","LoginPage","SignUpPage","SignUpSuccessPage","NewPassPage","PreForgotPage","ForgotSuccessPage","connect","props","fallback","exact","path","component","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","environment","process","require","default","config","BASE_URL","preforgotSuccessRoute","rootRoute"],"mappings":"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","file":"static/js/main.61990eb7.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace */\nimport { createAction } from 'redux-actions';\nimport { IUser } from '../../types';\n\nenum Type {\n    SET_USER = 'SET_USER'\n}\n\nconst setUser = createAction<IUser>(Type.SET_USER);\n\nexport const UserActions = {\n    Type,\n\n    setUser,\n}\n\nexport type UserActions = Omit<typeof UserActions, 'Type'>;","import { createAction } from 'redux-actions';\nimport { IAuth, ILogin, ISignUp } from '../../types/auth';\n\nenum Type {\n    SIGN_IN = 'SIGN_IN',\n    SET_AUTH = 'SET_AUTH',\n    SIGN_UP = 'SIGN_UP',\n}\n\nconst setAuthInfo = createAction<IAuth>(Type.SET_AUTH);\nconst signIn = createAction<ILogin>(Type.SIGN_IN);\nconst signUp = createAction<ISignUp>(Type.SIGN_UP);\n\n\n\nexport const AuthActions = {\n    Type,\n\n    setAuthInfo,\n    signIn,\n    signUp,\n}\n\nexport type AuthActions = Omit<typeof AuthActions, 'Type'>;\n","import {createAction} from 'redux-actions';\nimport {INewpass} from '../../types/auth';\n\nenum Type {\n  NEW_PASS = 'NEW_PASS',\n}\n\nconst newpass = createAction<INewpass>(Type.NEW_PASS);\n\n\nexport const NewPassActions = {\n  Type,\n\n  newpass\n}\n\nexport type NewPassActions = Omit<typeof NewPassActions, 'Type'>;\n","var map = {\n\t\"./development\": 84,\n\t\"./development.ts\": 84,\n\t\"./production\": 85,\n\t\"./production.ts\": 85\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 137;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum ContentTypes {\n    APPLICATION_JSON = 'application/json',\n    MULTIPART_FORM_DATA = 'multipart/form-data',\n}\n\nexport * from './auth';","import { handleActions } from 'redux-actions';\nimport { IUser } from '../../types';\nimport { UserActions } from '../actions';\n\nconst initialState = null;\n\nexport const UserReducer = handleActions<IUser | null, IUser>({\n    [UserActions.Type.SET_USER]: (state, action) => action.payload,\n}, initialState);","import { handleActions } from \"redux-actions\";\nimport { IAuth } from \"../../types/auth\";\nimport { AuthActions } from \"../actions\";\n\nconst initialState = null;\n\nexport const AuthReducer = handleActions<IAuth | null, IAuth>({\n    [AuthActions.Type.SET_AUTH]: (state, action) => action.payload,\n}, initialState)","import { handleActions } from \"redux-actions\";\nimport { INewpass} from \"../../types/auth\";\nimport { NewPassActions } from \"../actions\";\n\nconst initialState = null;\n\nexport const NewPassReducer = handleActions<INewpass | null, INewpass>({\n  [NewPassActions.Type.NEW_PASS]: (state, action) => action.payload,\n}, initialState)\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport {combineReducers} from 'redux';\nimport {routerReducer} from 'react-router-redux';\nimport {UserReducer} from './user';\nimport {IRootState} from './state';\nimport {AuthReducer} from './auth';\nimport {NewPassReducer} from './newpass';\n\n// NOTE: current type definition of Reducer in 'redux-actions' module\n// doesn't go well with redux@4\nconst rootReducer = combineReducers<IRootState>({\n  router: routerReducer,\n  user: UserReducer as any,\n  auth: AuthReducer as any,\n  newpass: NewPassReducer as any,\n});\n\nexport default rootReducer;\n","import axios from 'axios';\nimport {ILogin, ISignUp, INewpass, IForgot} from '../../../types';\nimport {ContentTypes} from '.';\nimport {forgotURL, newpassURL, signInURL, signUpURL} from '../../constants/auth';\n\nexport function signIn(data: ILogin) {\n  return axios({\n    url: signInURL,\n    method: 'POST',\n    headers: {\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n\nexport function signUp(data: ISignUp) {\n  return axios({\n    url: signUpURL,\n    method: 'POST',\n    headers: {\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n\nexport function newpass(data: INewpass) {\n  return axios({\n    url: newpassURL,\n    method: 'POST',\n    headers: {\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n\nexport function forgot(data: IForgot) {\n  console.log('forgot');\n  return axios({\n    url: forgotURL,\n    method: 'POST',\n    headers: {\n      'accept': '*/*',\n      'Content-Type': ContentTypes.APPLICATION_JSON,\n    },\n    data,\n  });\n}\n","import {put, call, select, takeLatest,} from 'redux-saga/effects';\nimport {push} from 'react-router-redux';\nimport {message} from 'antd';\nimport {AuthActions, UserActions, NewPassActions} from '../actions';\nimport {Action} from 'redux-actions';\nimport {ILogin, IAuth, IUser, ISignUp, INewpass, IForgot} from '../../types';\nimport {signIn, signUp, newpass, forgot} from './api';\nimport * as _ from 'lodash';\nimport {newpassSuccessRoute, signUpSuccessRoute} from \"../constants/auth\";\nimport {ForgotActions} from \"../actions/forgot\";\n\n\nfunction* SignInWorker(action: Action<ILogin>) {\n  try {\n    const {data} = yield call(signIn, action.payload);\n\n    yield put(AuthActions.setAuthInfo(_.pick(data, ['accessToken']) as IAuth));\n    yield put(UserActions.setUser(_.omit(data, 'accessToken') as IUser));\n  } catch (error) {\n    message.error('Failed to login!');\n    console.error(error);\n  }\n}\n\nfunction* SignUpWorker(action: Action<ISignUp>) {\n  try {\n    const {data} = yield call(signUp, action.payload);\n\n    yield put(push(signUpSuccessRoute));\n  } catch (error) {\n    message.error('Failed to sign up!');\n    console.error(error);\n  }\n}\n\nfunction* NewPassWorker(action: Action<INewpass>) {\n  try {\n    yield call(newpass, action.payload);\n  } catch (error) {\n    message.error('Failed to NewPassWorker!');\n    console.error(error);\n  }\n}\n\nfunction* ForgotWorker(action: Action<IForgot>) {\n  try {\n    yield call(forgot, action.payload);\n  } catch (error) {\n    message.error('Failed to ForgotWorker!');\n    console.error(error);\n  }\n}\n\n\nexport default function* watchAuth() {\n  yield takeLatest(AuthActions.Type.SIGN_IN, SignInWorker);\n  yield takeLatest(AuthActions.Type.SIGN_UP, SignUpWorker);\n  yield takeLatest(NewPassActions.Type.NEW_PASS, NewPassWorker);\n  yield takeLatest(ForgotActions.Type.FORGOT, ForgotWorker);\n}\n","import { all } from 'redux-saga/effects';\nimport authSaga from './auth';\n\nexport default function* rootSaga() {\n    yield all([\n        authSaga(),\n    ]);\n}","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from 'react-router-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\n\nimport rootReducer from \"../reducers\";\nimport rootSaga from '../sagas';\n\nexport const history = createBrowserHistory();\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers =\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\nconst enhancer = composeEnhancers(\n    applyMiddleware(sagaMiddleware, routerMiddleware(history))\n);\nconst store = createStore(rootReducer, enhancer);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport { Spin } from 'antd';\n\nimport './styles.scss';\n\nexport default function Fallback() {\n    return (\n        <div className=\"router-lazy-spin\">\n            <Spin tip=\"Loading...\" />\n        </div>\n    )\n}\n","import React, {Suspense, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport {Router, Route, Switch, RouteProps} from 'react-router-dom';\nimport {history} from '../redux/store';\nimport Fallback from '../components/common/fallback';\nimport {IRootState} from '../redux/reducers/state';\nimport {IAuth} from '../types/auth';\nimport 'antd/dist/antd.css';\n\nconst HomePage = React.lazy(() => import('../pages/home'));\nconst LoginPage = React.lazy(() => import('../pages/auth/login'));\nconst SignUpPage = React.lazy(() => import('../pages/auth/signup'));\nconst SignUpSuccessPage = React.lazy(() => import('../pages/auth/signUpSuccess'));\nconst NewPassPage = React.lazy(() => import('../pages/auth/newpass'));\nconst PreForgotPage = React.lazy(() => import('../pages/auth/preforgot'));\nconst ForgotSuccessPage = React.lazy(() => import('../pages/auth/afterforgot'));\n\ninterface IMainRouterProps extends RouteProps {\n    auth: IAuth,\n}\n\nconsole.log(\"MainRouter\")\n\nfunction MainRouter(props: IMainRouterProps) {\n    return (\n        <Router history={history}>\n            <Suspense fallback={<Fallback/>}>\n                <Switch>\n                    {props.auth\n                        ? (\n                            <Route exact path=\"/\" component={HomePage}/>\n                        )\n                        : (\n                            <>\n                                <Route exact path=\"/\" component={LoginPage}/>\n                                <Route exact path=\"/signup\" component={SignUpPage}/>\n                                <Route exact path=\"/signup/success\" component={SignUpSuccessPage}/>\n                                <Route exact path=\"/forgot/success\" component={ForgotSuccessPage}/>\n                                <Route exact path=\"/auth/forgotPassword\" component={NewPassPage}/>\n                                <Route exact path=\"/forgot\" component={PreForgotPage}/>\n                            </>\n                        )\n                    }\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nconst mapStateToProps = (state: IRootState): IMainRouterProps => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(MainRouter);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport MainRouter from './router';\n\nimport './index.scss';\nconsole.log(\"index\")\nconst app = (\n    <Provider store={store}>\n        <MainRouter />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import *  as _ from 'lodash';\n\nconst environment = process.env.NODE_ENV || 'development';\n\ninterface IConfig {\n  environment: string;\n  BASE_URL: string;\n}\n\nexport default _.extend<IConfig>({\n  environment,\n},\nrequire(`${__dirname}/env/${environment}`).default, /* eslint \"import/no-dynamic-require\": 0 */\n);\n","import config from '../../config';\n\nexport const signInURL = `${config.BASE_URL}/auth/signIn`;\nexport const signUpURL = `${config.BASE_URL}/auth/signUp`;\nexport const newpassURL = `${config.BASE_URL}/auth/changemypass`;\nexport const forgotURL = `${config.BASE_URL}/auth/forgotPassword`;\n\nexport const signUpSuccessRoute = '/signup/success';\nexport const newpassSuccessRoute = '/newpass/sucess';\nexport const preforgotSuccessRoute = '/forgot/success';\n\nexport const rootRoute = '/';\n","import {createAction} from 'redux-actions';\nimport {IForgot} from '../../types/auth';\n\nenum Type {\n  FORGOT = 'FORGOT',\n}\n\nconst forgot = createAction<IForgot>(Type.FORGOT);\n\n\nexport const ForgotActions = {\n  Type,\n\n  forgot\n}\n\nexport type ForgotActions = Omit<typeof ForgotActions, 'Type'>;\n","export default {\n  BASE_URL: 'https://endorphin.fun',\n};\n","export default {\n  BASE_URL: 'https://endorphin.fun',\n};\n"],"sourceRoot":""}